#+title: Infra Api Snoop Demo
#+PROPERTY: header-args:sql-mode+ :product postgres
#+STARTUP: content
* deploy
** Deployment
#+begin_src shell
kubectl apply -f https://raw.githubusercontent.com/cncf-infra/infrasnoop/canon/manifests/infrasnoop.yaml
#+end_src

** Verify
#+begin_src shell
kubectl get helmrelease,pod,svc
#+end_src

* automate
** logs
#+begin_src tmux :session ":logs"
kubectl logs infrasnoop-0
#+end_src
** infrasnoop shell
#+begin_src tmux :session ":shell"
kubectl exec infrasnoop-0 -ti -c infrasnoop -- bash -l
#+end_src
** sideloader shell
#+begin_src tmux :session ":psql"
psql -U infrasnoop -h infrasnoop
select * from describe_relations();
#+end_src
* query
:PROPERTIES:
:header-args:sql-mode+: :session infrasnoop :database infrasnoop :dbuser infrasnoop
:END:
** IMPORTANT
All sql blocks in here are running in our infrasnoop session.
However, when starting for the first time, you want to make sure you are putting in the user/db/server prompts correctly.
They are:
- user :: infrasnoop
- database :: infrasnoop
- server :: infrasnoop

** Test it works

We can see the relations in this db with our helper function.

#+begin_src sql-mode :dbuser infrasnoop
select * from describe_relations();
#+end_src

** populating the tables
*** Load prow jobs
#+begin_src sql-mode
select * from add_prow_deck_jobs();
#+end_src

#+begin_src sql-mode
select count(*) from prow.job_spec;
#+end_src

** Jobs and their clusters
#+begin_src sql-mode
SELECT
  cluster,
  count(*) AS count,
  CONCAT(ROUND(count(*) * 100.0 / SUM(count(*)) OVER (), 2), '%') AS percentage
FROM prow.job_spec
GROUP BY cluster
ORDER BY count(*) DESC;
#+end_src

** Example prow queries
*** A sanity check
First, let's look at a prow job that we know should exist in our successful jobs: the apisnoop conformance-gate.

#+begin_src sql-mode
select job
  from prow.job
 where job ilike '%apisnoop%conformance%';
#+end_src

And we can see when this job ran.

#+begin_src sql-mode
select job.job, started, finished
  from prow.deck deck
         join prow.job job using(build_id)
 where job.job = 'apisnoop-conformance-gate';
#+end_src

And some details on its spec.

#+begin_src sql-mode
select job, type, agent, cluster, prowjob_defaults, namespace
  from prow.job_spec
 where job = 'apisnoop-conformance-gate';
#+end_src


We can look at its labels
#+begin_src sql-mode
select label,content
  from prow.job_label
 where job = 'apisnoop-conformance-gate';
#+end_src

And its annotations:

#+begin_src sql-mode
select annotation, content
  from prow.job_annotation
 where job = 'apisnoop-conformance-gate';
#+end_src

If all the above queries returned results, then our db is set up and connected and good. Now we can do some more interesting queries.

*** Jobs without a cluster
This query will show any successfully running jobs that have no cluster defined in their spec.  Ideally this number is low, and this may even return 0 results.

#+begin_src sql-mode
\d prow.job
#+end_src

#+begin_src sql-mode
select data->'spec'->>'cluster' from prow.job limit 1;
#+end_src




#+begin_src sql-mode
select count(*) from prow.job j where j.data->'spec'->>'cluster' = 'default';
#+end_src
#+begin_src sql-mode
select count(*) from prow.job j join prow.job_spec spec using(job) where spec.cluster::text = '"default"';
#+end_src

#+begin_src sql-mode
select job,build_id from prow.job j where j.data->'spec'->>'cluster' = 'default' limit 1;
#+end_src

#+begin_src sql-mode
select jsonb_pretty(data) from prow.job j where j.data->'spec'->>'cluster' = 'default' limit 1;
#+end_src

#+begin_src sql-mode
select content, count(distinct job) from prow.job j join prow.job_spec spec using(job) left join prow.job_annotation using(job) where spec.cluster::text = '"default"' and annotation ilike '%alert%email%' group by content order by count desc;
#+end_src

#+begin_src sql-mode
select content, count(distinct job) from prow.job j join prow.job_spec spec using(job) left join prow.job_annotation using(job) where spec.cluster::text = '"default"' and annotation ilike '%dashboard%' group by content order by count desc;
#+end_src


When I last ran it, I got 3 results returned.

*** Jobs with dind-enabled

One other thing we could look at is the number of jobs labelled with 'preset-dind-enabled'.
#+begin_src sql-mode
select count(job)
  from prow.job_label
 where label = 'preset-dind-enabled';
#+end_src

This will be many more, likely, so I just asked for the count.

you can always dive deeper by looking at the results, but limit to 25 rows or some other limit.

*** look at all the other labels of these jobs
For the jobs labelled with 'preset-dind-enabled', what other labels do they have?

one way to ask this is to use a common table expression(cte):

#+begin_src sql-mode
with dind_jobs as (
  select job
    from prow.job_label
   where label = 'preset-dind-enabled'
)
select job, label, content
  from prow.job j
       join prow.job_label l using(job)
       join dind_jobs d using(job)
 order by j.job, label
 limit 25 ;
#+end_src

We can do a frequency count for the types of labels (note: this prolly isn't an interesting query, but useful for showing some sql tricks)

#+begin_src sql-mode
with dind_jobs as (
  select job
    from prow.job_label
   where label = 'preset-dind-enabled'
)
select distinct label, count(distinct job)
  from prow.job j
       join prow.job_label l using(job)
       join dind_jobs d using(job)
              group by label
 order by count desc
 limit 50;
#+end_src

** Example: Looking into the jobs without a cluster
Before, we found the cluster-free jobs with

#+begin_src sql-mode
select job
  from prow.job_spec spec
 where spec.cluster is null
 group by job;
#+end_src

this returns some # of jobs(usually 3-9)


However, this is a bit misleading. They're "spec.cluster" value is null, but it's because there is no spec! We can see this when we try to look at the raw data.

#+begin_src sql-mode
select job, data
  from prow.job
       join prow.job_spec spec using(job)
 where spec.cluster is null;
#+end_src

It's spec is just the note "ProwJob not found".

This bit of json is being pulled direct from their spyglass link, which we can grab with the below query

#+begin_src sql-mode
select job, url
  from prow.job
       join prow.job_spec spec using(job)
       join prow.deck using(job,build_id)
 where spec.cluster is null;
#+end_src


Zooming out, we can organize all the successful jobs by the clusters they use.
The row at the bottom will be for the null clusters, e.g. without prowjob
definitions.

#+begin_src sql-mode
\d+ prow.job_spec
#+end_src


#+begin_src sql-mode
select cluster, count(*)
  from prow.job_spec
 group by cluster
 order by count desc;
#+end_src

Is there any pattern that connects these jobs without prowjobs?

* Footnotes
