#+TITLE: ii
* storage and database for cluster
** ko
#+begin_src shell
curl -L https://github.com/google/ko/releases/download/v0.11.2/ko_0.11.2_Linux_x86_64.tar.gz | tar xzf - ko
chmod +x ./ko
mv ko /usr/local/bin
ko version
#+end_src

#+RESULTS:
#+begin_example
0.11.2
#+end_example

** postgres operator
Much of our simplicity in deployment is due to using this approach.
*** install
You can safely ignore: `info: skipping unknown hook: "crd-install"`
#+begin_src shell :prologue "(\n" :epilogue ") 2>&1\n:\n" :wrap "src yaml" :nresults silent
kubectl create namespace postgres-operator --dry-run=client -o yaml | kubectl apply -f -
kubectl apply -f https://github.com/zalando/postgres-operator/raw/master/charts/postgres-operator/crds/operatorconfigurations.yaml
helm template postgres-operator -n postgres-operator https://raw.githubusercontent.com/zalando/postgres-operator/master/charts/postgres-operator/postgres-operator-1.7.1.tgz | kubectl apply -f -
#+end_src

#+RESULTS:
#+begin_src yaml
namespace/postgres-operator configured
customresourcedefinition.apiextensions.k8s.io/operatorconfigurations.acid.zalan.do unchanged
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
manifest_sorter.go:192: info: skipping unknown hook: "crd-install"
serviceaccount/postgres-operator configured
clusterrole.rbac.authorization.k8s.io/postgres-pod configured
clusterrole.rbac.authorization.k8s.io/postgres-operator configured
clusterrolebinding.rbac.authorization.k8s.io/postgres-operator configured
service/postgres-operator configured
deployment.apps/postgres-operator configured
operatorconfiguration.acid.zalan.do/postgres-operator unchanged
#+end_src

*** delete
#+begin_src shell :prologue "(\n" :epilogue ") 2>&1\n:\n" :wrap "src yaml" :nresults silent
kubectl delete -f https://github.com/zalando/postgres-operator/raw/master/charts/postgres-operator/crds/operatorconfigurations.yaml
helm template postgres-operator -n postgres-operator https://raw.githubusercontent.com/zalando/postgres-operator/master/charts/postgres-operator/postgres-operator-1.7.1.tgz | kubectl delete -f -
kubectl create namespace postgres-operator --dry-run=client -o yaml | kubectl delete -f -
#+end_src
*** verify
#+name: postgres-operator
#+begin_src shell
kubectl get crd operatorconfigurations.acid.zalan.do
kubectl get all -n postgres-operator
#+end_src

#+RESULTS: postgres-operator
#+begin_example
NAME                                   CREATED AT
operatorconfigurations.acid.zalan.do   2022-03-29T01:51:35Z
NAME                                     READY   STATUS    RESTARTS   AGE
pod/postgres-operator-7b67f8857d-27m8p   1/1     Running   0          8s

NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE
service/postgres-operator   ClusterIP   10.101.41.182   <none>        8080/TCP   39h

NAME                                READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/postgres-operator   1/1     1            1           39h

NAME                                           DESIRED   CURRENT   READY   AGE
replicaset.apps/postgres-operator-7b67f8857d   1         1         1       8s
replicaset.apps/postgres-operator-7bc878b7f6   0         0         0       39h

NAME                                                    IMAGE                                               CLUSTER-LABEL   SERVICE-ACCOUNT   MIN-INSTANCES   AGE
operatorconfiguration.acid.zalan.do/postgres-operator   registry.opensource.zalan.do/acid/spilo-14:2.1-p3   cluster-name    postgres-pod      -1              39h
#+end_example

** csi-gcs
We use this to mount gcs buckets directly into our containers.
*** install
#+begin_src shell :prologue "(\n" :epilogue ") 2>&1\n:\n" :wrap "src yaml" :nresults silent
kubectl apply -k "github.com/ofek/csi-gcs/deploy/overlays/stable"
#+end_src

#+RESULTS:
#+begin_src yaml
customresourcedefinition.apiextensions.k8s.io/publishedvolumes.gcs.csi.ofek.dev created
serviceaccount/csi-gcs created
clusterrole.rbac.authorization.k8s.io/csi-gcs-node created
clusterrole.rbac.authorization.k8s.io/csi-gcs-provisioner created
clusterrole.rbac.authorization.k8s.io/csi-gcs-resizer created
clusterrolebinding.rbac.authorization.k8s.io/csi-gcs-node created
clusterrolebinding.rbac.authorization.k8s.io/csi-gcs-provisioner created
clusterrolebinding.rbac.authorization.k8s.io/csi-gcs-resizer created
daemonset.apps/csi-gcs created
csidriver.storage.k8s.io/gcs.csi.ofek.dev created
#+end_src

*** verify
#+name: csidrivers
#+begin_src shell
kubectl get apiservices v1beta1.gcs.csi.ofek.dev
kubectl get CSIDriver
kubectl get daemonsets -n kube-system csi-gcs
kubectl get pods -n kube-system -l app=csi-gcs
#+end_src

#+RESULTS: csidrivers
#+begin_example
NAME                       SERVICE   AVAILABLE   AGE
v1beta1.gcs.csi.ofek.dev   Local     True        35s
NAME               ATTACHREQUIRED   PODINFOONMOUNT   STORAGECAPACITY   TOKENREQUESTS   REQUIRESREPUBLISH   MODES        AGE
gcs.csi.ofek.dev   false            true             false             <unset>         false               Persistent   35s
NAME      DESIRED   CURRENT   READY   UP-TO-DATE   AVAILABLE   NODE SELECTOR            AGE
csi-gcs   1         1         1       1            1           kubernetes.io/os=linux   35s
NAME            READY   STATUS    RESTARTS   AGE
csi-gcs-tfgwx   4/4     Running   0          35s
#+end_example

*** setup
This is for manual setup of gcloud service account secret key.
#+begin_src shell :results silent :noeval :eval never
kubectl -n default create secret generic csi-gcs-secret --from-file=key=ii-service-account.json
#+end_src

* tmate setup
** tilt
#+begin_src tmate :window tilt  :prologue "cd ~/cncf-infra/infrasnoop\n"
kubectl config set-context --current --namespace=infrasnoop
tilt up --legacy --host 0.0.0.0
#+end_src
** sqlport forward
#+begin_src tmate :window psql-port  :prologue "cd ~/cncf-infra/infrasnoop\n"
kubectl port-forward -n infrasnoop pod/infra-db-0 5432:5432
#+end_src
* namespace
#+begin_src shell :results none
kubectl config set-context --current --namespace=infrasnoop
#+end_src
* monitoring infra-db
** Events
#+begin_src tmate :window infra-db-events
kubectl get event -w --field-selector involvedObject.name=infra-db-0
#+end_src
** Status
#+name: status.conditions
#+begin_src shell
kubectl get pod/infra-db-0 -o=jsonpath='{.status.conditions}' | jq .
#+end_src

#+RESULTS: status.conditions
#+begin_example
[
  {
    "lastProbeTime": null,
    "lastTransitionTime": "2022-03-30T17:57:14Z",
    "status": "True",
    "type": "Initialized"
  },
  {
    "lastProbeTime": null,
    "lastTransitionTime": "2022-03-30T17:57:15Z",
    "status": "True",
    "type": "Ready"
  },
  {
    "lastProbeTime": null,
    "lastTransitionTime": "2022-03-30T17:57:15Z",
    "status": "True",
    "type": "ContainersReady"
  },
  {
    "lastProbeTime": null,
    "lastTransitionTime": "2022-03-30T17:50:30Z",
    "status": "True",
    "type": "PodScheduled"
  }
]
#+end_example

** podwatch
#+begin_src  tmate :window pod-watch
kubectl get pods --watch
#+end_src
** initContainers
*** status
#+name: initContainerStatuses
#+begin_src shell :wrap "src yaml"
kubectl get pod infra-db-0 -o=jsonpath='{.status.initContainerStatuses}' | jq .
#+end_src

#+RESULTS: initContainerStatuses
#+begin_src yaml
[
  {
    "containerID": "docker://8f40b7355befaf980f53213ead6425b28a29258e7f6255bfcd4bff2ba615981d",
    "image": "bitnami/git:latest",
    "imageID": "docker-pullable://bitnami/git@sha256:7e2cc98de41f7141214290d0a2684fc5eec269c66b4fa891e46a845e0cade25d",
    "lastState": {},
    "name": "init-clone-k8s-infra",
    "ready": true,
    "restartCount": 0,
    "state": {
      "terminated": {
        "containerID": "docker://8f40b7355befaf980f53213ead6425b28a29258e7f6255bfcd4bff2ba615981d",
        "exitCode": 0,
        "finishedAt": "2022-03-30T17:50:42Z",
        "reason": "Completed",
        "startedAt": "2022-03-30T17:50:38Z"
      }
    }
  },
  {
    "containerID": "docker://3e597ae4545d299b15219fd89805cbbcd21b81239a8af68511fdeb4f09ade30f",
    "image": "ko-local/infrasnoop:tilt-build-1648438835",
    "imageID": "docker://sha256:fdaf42b14575f2c371c5b927b3e7f9f2b10fc11c885d85fe5e834e889a44ab45",
    "lastState": {},
    "name": "init-dump-prowjobconfig",
    "ready": true,
    "restartCount": 0,
    "state": {
      "terminated": {
        "containerID": "docker://3e597ae4545d299b15219fd89805cbbcd21b81239a8af68511fdeb4f09ade30f",
        "exitCode": 0,
        "finishedAt": "2022-03-30T17:50:45Z",
        "reason": "Completed",
        "startedAt": "2022-03-30T17:50:43Z"
      }
    }
  },
  {
    "containerID": "docker://6d708b6f96132d684dfe0f4953b5fda0a7fd47ad1e9a4067191843584956cab5",
    "image": "google/cloud-sdk:378.0.0",
    "imageID": "docker-pullable://google/cloud-sdk@sha256:f94bacf262ad8f5e7173cea2db3d969c43b938a036e3c6294036c3d96261f2f4",
    "lastState": {},
    "name": "init-dump-k8s-gubernator",
    "ready": true,
    "restartCount": 0,
    "state": {
      "terminated": {
        "containerID": "docker://6d708b6f96132d684dfe0f4953b5fda0a7fd47ad1e9a4067191843584956cab5",
        "exitCode": 0,
        "finishedAt": "2022-03-30T17:51:21Z",
        "reason": "Completed",
        "startedAt": "2022-03-30T17:50:46Z"
      }
    }
  },
  {
    "containerID": "docker://6eba208874e218d717f26277a569f4ff70336fe43b996102835f52ddf624beb0",
    "image": "google/cloud-sdk:378.0.0",
    "imageID": "docker-pullable://google/cloud-sdk@sha256:f94bacf262ad8f5e7173cea2db3d969c43b938a036e3c6294036c3d96261f2f4",
    "lastState": {},
    "name": "init-dump-job-results-gcs",
    "ready": true,
    "restartCount": 0,
    "state": {
      "terminated": {
        "containerID": "docker://6eba208874e218d717f26277a569f4ff70336fe43b996102835f52ddf624beb0",
        "exitCode": 0,
        "finishedAt": "2022-03-30T17:57:13Z",
        "reason": "Completed",
        "startedAt": "2022-03-30T17:51:22Z"
      }
    }
  }
]
#+end_src
*** logs
#+name: jobs-results
#+begin_src tmate :window job-results-gcs
kubectl logs infra-db-0 -c init-dump-job-results-gcs -f
#+end_src

* connect
#+begin_src sql-mode
\d ;
#+end_src

#+RESULTS:
#+begin_SRC example
\d ;
                 List of relations
 Schema |          Name           | Type |  Owner
--------+-------------------------+------+----------
 public | pg_stat_kcache          | view | postgres
 public | pg_stat_kcache_detail   | view | postgres
 public | pg_stat_statements      | view | postgres
 public | pg_stat_statements_info | view | postgres
(4 rows)

#+end_SRC
* infra-db shell
** gs://kubernetes-jekins => /gs/kubernetes-jenkins
#+begin_src shell :prologue "kubectl exec -ti infra-db-0 -- bash -c '\n" :epilogue "\n'"
ls /gs/kubernetes-jenkins
#+end_src

#+RESULTS:
#+begin_example
logs
oncall.json
pr-logs
shared-results
#+end_example
